{"version":3,"file":"component---src-pages-guides-custom-actions-index-md-4d5d20cde98e57e62d28.js","mappings":"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","sources":["webpack://frameio-api/./src/pages/guides/Custom Actions/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/frameio-api/frameio-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-actions\"\n    }}>{`Custom Actions`}</h1>\n    <p>{`Use the Custom Actions beta to build integrations directly into `}<a parentName=\"p\" {...{\n        \"href\": \"https://next.frame.io/\"\n      }}>{`Frame.io`}</a>{` as programmable UI components. This enables workflows that can be triggered by users within the app, leveraging the same underlying events routing as webhooks. You can create user-triggered single or multi-step forms that come back to Frame.io as another form or a basic response. And when a user clicks a Custom Action on an Asset, Frame.io sends a payload to a URL you provide. The receiving application responds with an HTTP status code to acknowledge receipt, or responds with a custom callback that can render additional UI in Frame.io.`}</p>\n    <p>{`Configure `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer-stage.adobe.com/frameio/api/alpha/#tag/Custom-Actions\"\n      }}>{`Custom Actions`}</a>{` in the Experimental API. A Custom Action requires:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Field name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name you choose for your custom action. It will be shown in the menu of available custom actions in Frame.io.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`---`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`---`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Explain what the action does, for reference (the description won't appear in the Frame.io web app).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Internal event key to help you differentiate between standard webhook events and your own.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`URL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Where to deliver events.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Workspace`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The Workspace that will use the custom action.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Configure Your Custom Action`}</strong>{`\nWhen a user selects a Custom Action on an Asset, Frame.io sends a payload to a URL you provide. The receiving application can respond with an HTTP status code to acknowledge receipt, or respond with a custom callback that renders additional UI in `}<a parentName=\"p\" {...{\n        \"href\": \"https://next.frame.io/\"\n      }}>{`Frame.io`}</a>{`.`}</p>\n    <p>{`Content Admin permissions are required to create Custom Actions for a Workspace. Ask your admin to modify your permissions if you don't have access.`}</p>\n    <p><strong parentName=\"p\">{`Payload From Frame.io`}</strong>{`\nWhen the user clicks your Custom Action, a payload is sent to the URL you set in the URL field. Use this payload to identify:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Which Custom Action was clicked`}</li>\n      <li parentName=\"ul\">{`Which resource was clicked`}</li>\n      <li parentName=\"ul\">{`Which user took the action`}</li>\n      <li parentName=\"ul\">{`Which account is associated with the Custom Action`}</li>\n      <li parentName=\"ul\">{`Which event type was triggered`}</li>\n      <li parentName=\"ul\">{`Which Workspace is associated with the Custom Action`}</li>\n      <li parentName=\"ul\">{`Which Project contains the resource on which the Custom action was triggered`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`POST /your/url\n{\n    \"account_id\": \"9a44f696-ae69-4e0c-9731-806d27ea46f1\",\n    \"action_id\": \"ecd40785-4485-4f07-9d26-a006ea84efdf\",\n    \"interaction_id\": \"e0a1c945-a8da-480d-92fb-e895cb640a01\",\n    \"project\":\n    {\n        \"id\": \"3dda6833-ec3b-46bd-a7d9-1a77c03a165b\"\n    },\n    \"resource\":\n    {\n        \"id\": \"f9d5728c-ac1a-4f48-92bb-ea2f9be3c58b\",\n        \"type\": \"file\"\n    },\n    \"type\": \"two.event\",\n    \"user\":\n    {\n        \"id\": \"50d976e6-27d2-47cb-9388-45b38d55f4f0\"\n    },\n    \"workspace\":\n    {\n        \"id\": \"382a1fe6-67cf-481e-9b65-79cfd9e9727f\"\n    }\n}\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Field name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`account_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The unique account of this Action. It is always be the same for a given Action.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`action_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The unique id of this Action. It is always be the same for a given Action.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`interaction_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`This is a unique identifier generated by Frame.io that you can use to keep track of your transaction. This identifier is the same throughout any sequence of an Action, including callback forms.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`project_id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The unique project of this Action. It is always be the same for a given Action.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`resource.id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The id of the resource from which you triggered your Action (usually an Asset).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`resource.type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The type of resource from which you triggered your Action (usually `}<strong parentName=\"td\">{`asset`}</strong>{`) It can be `}<inlineCode parentName=\"td\">{`file`}</inlineCode>{`,`}<inlineCode parentName=\"td\">{`folder`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`version_stack`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the event you put in the Event field when configuring your Action.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`user.id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The unique ID to identify the user who triggered the action.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`workspace.id`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The unique Workspace of this Action. It is always be the same for a given Action.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`data`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An object of key-value pairs denoting the name of a form element and the value selected and is what the user defines to inform the client url app of a choice being made.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Interactions, Retries and Timeouts`}</strong>{`\nThe `}<inlineCode parentName=\"p\">{`interaction_id`}</inlineCode>{` is a unique identifier to track of the interaction as it evolves over time. If you do not need to respond to the user, return a 200 status code, and you're done. While optional, we recommend including information about the result of the action, like a success message or error alert. Custom actions support message callbacks.Frame.io expects a response in less than 10 seconds, and attempts to retry up to 5 times while waiting for a successful response. Ideally the response is immediate and asynchronous actions occur after a trigger via a Custom Action.`}</p>\n    <p><strong parentName=\"p\">{`Create a Message Callback`}</strong>{`\nIn your HTTP response to the webhook event, you can return a JSON object describing a message that will be returned to the initiating user in the Frame.io UI.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"title\": \"Success!\",\n  \"description\": \"The thing worked! Nice.\"\n}\n`}</code></pre>\n    <p>{`Messages close the action loop providing variable context to the user, without asking them to switch contexts. When the initial payload and subsequent calls to the Frame.io API don't provide enough context for the receiving application, use `}<strong parentName=\"p\">{`Form Callbacks`}</strong>{`.`}</p>\n    <p><strong parentName=\"p\">{`Create a Form Callback`}</strong>{`\nLet's say that you need more info before you start your process. For example, you may be uploading content to a system that requires additional details and settings. You can describe a Form in your response, which the user sees snd fills out, and is then sent right back to you! Here's an example form that renders a Form in the Frame.io UI that the acting user can fill out and submit:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"title\": \"Need some more info!\",\n  \"description\": \"Getting ready to submit this file!\",\n  \"fields\": [\n    {\n      \"type\": \"text\",\n      \"label\": \"Title\",\n      \"name\": \"title\",\n      \"value\": \"MyVideo.mp4\"\n    },\n    {\n      \"type\": \"select\",\n      \"label\": \"Captions\",\n      \"name\": \"captions\",\n      \"options\": [\n        {\n          \"name\": \"Off\",\n          \"value\": \"off\"\n        },\n        {\n          \"name\": \"On\",\n          \"value\": \"on\"\n        }\n      ]\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`When the user submits the form, you'll receive an event on the same URL as the initial POST:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`POST /your/url\n{\n  \"type\": \"your-specified-event-name\",\n  \"interaction_id\": \"the-same-id-as-before\",\n  \"action_id\": \"unique-id-for-this-custom-action\",\n  \"data\":{\n    \"title\": \"MyVideo.mp4\",\n    \"captions\": \"off\"\n  }\n}\n`}</code></pre>\n    <p>{`All custom fields added on a form appear in the data section of the JSON payload sent by Frame.io. Use the `}<inlineCode parentName=\"p\">{`interaction_id`}</inlineCode>{` to map the initial request and this new form data. And again, you can respond with a message (or even another form!). By chaining Actions, Forms, and Messages, you can effectively program entire Asset workflows in Frame.io with business logic from an external system.`}</p>\n    <p><strong parentName=\"p\">{`Form details`}</strong>{`\nLike messages, Forms support `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` attributes that render at the top of the Form. Beyond that, each form field accepts the following base attributes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`type -- Tells the Frame.io UI which type of data to expect, and which component and render.`}</li>\n      <li parentName=\"ul\">{`label -- Appears on the UI as the header above the field.`}</li>\n      <li parentName=\"ul\">{`name -- Key by which the field will be identified on the subsequent payload.`}</li>\n      <li parentName=\"ul\">{`value -- Value with which to pre-populate the field.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Supported Field Types`}</strong>{`\n`}<strong parentName=\"p\">{`Text field`}</strong>{`: A simple text field with no additional parameters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{  \n  \"type\": \"text\",\n  \"label\": \"Title\",\n  \"name\": \"title\",\n  \"value\": \"MyVideo.mp4\"\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Text area`}</strong>{`: A simple text area with no additional parameters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{  \n  \"type\": \"textarea\",\n  \"label\": \"Description\",\n  \"name\": \"description\",\n  \"value\": \"This video is really, really popular.\"\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Select list`}</strong>{`: Defines a picklist that the user can choose from. Must include an `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` list, each member of which should include a human-readable `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, and a machine-parseable `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"type\": \"select\",\n  \"label\": \"Captions\",\n  \"name\": \"captions\",\n  \"value\": \"off\",\n  \"options\": [\n       {\n         \"name\": \"Off\",\n         \"value\": \"off\"\n       },\n       {\n         \"name\": \"On\",\n         \"value\": \"on\"\n      }\n   ]\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Checkbox:`}</strong>{` A simple checkbox with no additional parameters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{ \n   \"type\": \"boolean\", \n   \"name\": \"enabled\", \n   \"label\": \"Enabled\", \n   \"value\": \"false\"\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Link:`}</strong>{` A simple link with no additional parameters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  {\n    \"type\": \"link\",\n    \"name\": \"videoLink\",\n    \"label\": \"Video Link\",\n    \"value\": \"https://www.youtube.com/watch?v=XtX1zv9CEVc\"\n }\n`}</code></pre>\n    <p><strong parentName=\"p\">{`The Frame.io Permissions Model`}</strong>{`\nCustom Actions have a special permissions model: they belong to a Workspace, not to any specific user who exists on an Account.  That means:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Any Content Admin can create a Custom Action on a Workspace.`}</li>\n      <li parentName=\"ul\">{`Any Content Admin can modify or delete a Custom Action that exists on a Team.  Once modified, all users will immediately see the result of the change.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Security and Verification`}</strong>{`\nBy default, all Custom Actions have a signing key generated during their creation. This is not configurable. This key can be used to verify that the request originates from Frame.io. Included in the `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request are the following:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`X-Frameio-Request-Timestamp`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The time your Custom Action was triggered.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`X-Frameio-Signature`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The computed signature.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`The timestamp`}</strong>{` is the time the request was signed on its way out of Frame.io's network. This can be used to prevent replay attacks. We recommended verifying this time is within 5 minutes of local time.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`The signature`}</strong>{` is a HMAC SHA-256 hash using the signing key provided when the Custom Action is first created.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Verifying the Signature`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Extract the signature from the HTTP headers.`}</li>\n      <li parentName=\"ol\">{`Create a message to sign by combining the version, delivery time, and request body `}<inlineCode parentName=\"li\">{`v0:timestamp:body`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Compute the HMAC SHA256 signature using your signing secret.`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: The provided signature is prefixed with `}<inlineCode parentName=\"p\">{`v0=`}</inlineCode>{`. Currently Frame.io only has this one version for signing requests. You will need to add this prefix to your computed signature.`}</p>\n    <p>{`Compare!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import hmac\nimport hashlib\n**def** verify_signature(curr_time, req_time, signature, body, secret):\n    \"\"\"\n    Verify webhook/custom action signature\n    :Args:\n        curr_time (float): Current epoch time\n        req_time (float): Request epoch time\n        signature (str): Signature provided by the frame.io API for the given request\n        body (str): Custom Action body from the received POST\n        secret (str): The secret for this Custom Action that you saved when you first created it\n    \"\"\"\n    if int(curr_time) - int(req_time) < 500:\n        message = 'v0:{}:{}'.format(req_time, body)\n        calculated_signature = 'v0={}'.format(hmac.new(\n            bytes(secret, 'latin-1'),\n            msg=bytes(message, 'latin-1'),\n            digestmod=hashlib.sha256).hexdigest())\n        if calculated_signature == signature:\n            return True\n    return False\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}