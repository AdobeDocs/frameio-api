"use strict";(self.webpackChunkframeio_api=self.webpackChunkframeio_api||[]).push([[5281],{14673:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return u}});var a=t(87462),o=t(63366),l=(t(15007),t(64983)),i=t(91515),d=["components"],s={},r={_frontmatter:s},p=i.Z;function u(e){var n=e.components,t=(0,o.Z)(e,d);return(0,l.mdx)(p,(0,a.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"how-to-upload"},"How to: Upload"),(0,l.mdx)("p",null,"This guide details the full flow to upload files using the Frame.io V4 API.  "),(0,l.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"You have a Frame.io V4 account administered via the ",(0,l.mdx)("a",{parentName:"li",href:"https://adminconsole.adobe.com/"},"Adobe Admin Console"),", OR you have ",(0,l.mdx)("a",{parentName:"li",href:"https://help.frame.io/en/articles/11758018-connecting-to-adobe-authentication"},"switched to Adobe authentication")," for your account user"),(0,l.mdx)("li",{parentName:"ol"},"You have logged into the ",(0,l.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/console"},"Adobe Developer Console")," and have added the Frame.io API to a new or existing project"),(0,l.mdx)("li",{parentName:"ol"},"You have generated the ",(0,l.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/frameio/guides/Authentication/"},"appropriate Authentication credentials")," for your project"),(0,l.mdx)("li",{parentName:"ol"},"You have succfully used those credentials to generate an access token")),(0,l.mdx)("h2",{id:"choosing-your-upload-method"},"Choosing your upload method"),(0,l.mdx)("p",null,"There are two ways to upload a file using the Frame.io API: ",(0,l.mdx)("inlineCode",{parentName:"p"},"Create File (local upload)")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"Create File (remote upload)"),". The local endpoint would be used when the media is locally accessible to your application, similar to dragging a file from your desktop; the remote upload option would be used when the media is accessed over the network, such as through an integration with another service. In this guide we'll start with the simpler case of completing a remote upload."),(0,l.mdx)("h2",{id:"remote-upload"},"Remote Upload"),(0,l.mdx)("p",null,"To create a file through remote upload, select the ",(0,l.mdx)("strong",{parentName:"p"},"Create File (remote upload)")," endpoint. The request body requires the file name and its source url."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{ \n    "data": {\n        "name": "my_file.jpg",\n        "source_url": "https://upload.wikimedia.org/wikipedia/commons/e/e1/White_Pixel_1x1.jpg"\n    }\n}\n')),(0,l.mdx)("p",null,"A successful request will yield a response like the one below."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "data": {\n        "id": "93e4079d-0a8a-4bf3-96cd-e6a03c465e5e",\n        "name": "my_file.jpg",\n        "status": "created",\n        "type": "file",\n        "file_size": 518,\n        "updated_at": "2025-06-26T20:14:33.796116Z",\n        "media_type": "image/jpeg",\n        "parent_id": "2e426fe0-f965-4594-8b2b-b4dff1dc00ec",\n        "project_id": "7e46e495-4444-4555-8649-bee4d391a997",\n        "created_at": "2025-06-26T20:14:33.159489Z",\n        "view_url": "https://next.frame.io/project/7e46e495-4444-4555-8649-bee4d391a997/view/93e4079d-0a8a-4bf3-96cd-e6a03c465e5e"\n    },\n    "links": {\n        "status": "/v4/accounts/6f70f1bd-7e89-4a7e-b4d3-7e576585a181/files/93e4079d-0a8a-4bf3-96cd-e6a03c465e5e/status"\n    }\n}\n')),(0,l.mdx)("h2",{id:"local-upload"},"Local Upload"),(0,l.mdx)("p",null,"To create a file through local upload, select the ",(0,l.mdx)("strong",{parentName:"p"},"Create File (local upload)")," endpoint. The request body requires the file name and its file size specified in bytes."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{ \n"data": {\n    "name": "my_file.jpg",\n    "file_size": 50645990\n  }\n}\n')),(0,l.mdx)("p",null,"If the request is successful, a placeholder file resource is created without any content. Depending on the file size, the response body will include one or more ",(0,l.mdx)("inlineCode",{parentName:"p"},"upload_urls"),". Given this example, we will need to manage this upload in multiple parts. See ",(0,l.mdx)("a",{parentName:"p",href:"#multi-part-upload"},"Multi-part Upload")," for next steps."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "data": {\n        "id": "fa18ba7b-b3ee-4dd6-9b31-bd07e554241d",\n        "name": "my_file.jpg",\n        "status": "created",\n        "type": "file",\n        "file_size": 50645990,\n        "updated_at": "2025-06-26T20:08:06.823170Z",\n        "media_type": "image/jpeg",\n        "parent_id": "2e426fe0-f965-4594-8b2b-b4dff1dc00ec",\n        "project_id": "7e46e495-4444-4555-8649-bee4d391a997",\n        "created_at": "2025-06-26T20:08:06.751313Z",\n        "upload_urls": [\n            {\n                "size": 16881997,\n                "url": "https://frameio-uploads-development.s3-accelerate.amazonaws.com/parts/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d/part_1?..."\n            },\n            {\n                "size": 16881997,\n                "url": "https://frameio-uploads-development.s3-accelerate.amazonaws.com/parts/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d/part_2?..."\n            },\n            {\n                "size": 16881996,\n                "url": "https://frameio-uploads-development.s3-accelerate.amazonaws.com/parts/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d/part_3?..."\n            },\n\n        ],\n        "view_url": "https://next.frame.io/project/7e46e495-4444-4555-8649-bee4d391a997/view/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d"\n    }\n}\n')),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"NOTE:")," These are important details to keep in mind when sending the subsequent upload request(s)."),(0,l.mdx)("blockquote",null,(0,l.mdx)("ul",{parentName:"blockquote"},(0,l.mdx)("li",{parentName:"ul"},"The HTTP request method must be ",(0,l.mdx)("inlineCode",{parentName:"li"},"PUT"),"."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"x-amz-acl")," header must be included and be set to private."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("inlineCode",{parentName:"li"},"Content-Type")," header must match the ",(0,l.mdx)("inlineCode",{parentName:"li"},"media_type")," specified in the original ",(0,l.mdx)("strong",{parentName:"li"},"Create File (local upload)")," request. This is true even when uploading the file as separate parts. In the example above, the value for ",(0,l.mdx)("inlineCode",{parentName:"li"},"media_type")," is ",(0,l.mdx)("inlineCode",{parentName:"li"},"image/jpeg"),". Therefore, the value for ",(0,l.mdx)("inlineCode",{parentName:"li"},"Content-Type")," must also be ",(0,l.mdx)("inlineCode",{parentName:"li"},"image/jpeg"),"."))),(0,l.mdx)("h2",{id:"multi-part-upload"},"Multi-part Upload"),(0,l.mdx)("p",null,"When a given file results in more than one upload url, it may be useful to compose a shell script that splits up the source file into chunks and issues the same number of subsequent requests."),(0,l.mdx)("p",null,"In the sample Python script below, we're passing in multiple upload urls in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"upload_urls")," parameter."),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Create File (local upload) with Multi-part Upload")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'import requests\nimport math\nfrom typing import List\nfrom tqdm import tqdm  # For progress bar\n\ndef upload_file_in_chunks(file_path: str, upload_urls: list[str], content_type: str | None = None, chunk_size: int | None = None) -> bool:\n    """\n    Upload a file in chunks using presigned URLs.\n    """\n    try:\n        # Auto-detect content type based on file extension\n        if content_type is None:\n            detected_content_type, _ = mimetypes.guess_type(file_path)\n            content_type = detected_content_type # Default fallback\n        \n        print(f"Detected content type: {content_type}")\n        \n        # Get file size\n        with open(file_path, \'rb\') as f:\n            f.seek(0, 2)  # Seek to end of file\n            file_size = f.tell()\n        \n        # Calculate chunk size if not provided\n        if chunk_size is None:\n            chunk_size = math.ceil(file_size / len(upload_urls))\n        \n        print(f"File size: {file_size} bytes")\n        print(f"Chunk size: {chunk_size} bytes")\n        print(f"Number of chunks: {len(upload_urls)}")\n        \n        # Upload each chunk\n        with open(file_path, \'rb\') as f:\n            with tqdm(total=len(upload_urls), desc="Uploading chunks") as pbar:\n                for i, url in enumerate(upload_urls):\n                    start_byte = i * chunk_size\n                    end_byte = min(start_byte + chunk_size, file_size)\n                    \n                    # Read chunk from file\n                    f.seek(start_byte)\n                    chunk = f.read(end_byte - start_byte)\n                    \n                    print(f"Uploading chunk {i+1}: {len(chunk)} bytes")\n                    \n                    # Upload chunk with minimal headers matching the signature\n                    response = requests.put(\n                        url,\n                        data=chunk,\n                        headers={\n                            \'content-type\': content_type,  \n                            \'x-amz-acl\': \'private\'       \n                        }\n                    )\n                    \n                    if response.status_code != 200:\n                        print(f"Failed to upload chunk {i+1}. Status code: {response.status_code}")\n                        print(f"Response text: {response.text}")\n                        print(f"Response headers: {dict(response.headers)}")\n                        return False\n                    else:\n                        print(f"Chunk {i+1} uploaded successfully!")\n                    \n                    pbar.update(1)\n        \n        return True\n    \n    except Exception as e:\n        print(f"Error during upload: {str(e)}")\n        return False\n\n# Example usage\nif __name__ == "__main__":\n    # Replace these with your actual values\n    file_path =  "/Users/MyComputer/local_upload/sample.jpg"  # Path to your file\n    upload_urls = ["https://frameio-uploads-development.s3-accelerate.amazonaws.com/parts/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d/part_1?...", "https://frameio-uploads-development.s3-accelerate.amazonaws.com/parts/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d/part_2?...", "https://frameio-uploads-development.s3-accelerate.amazonaws.com/parts/fa18ba7b-b3ee-4dd6-9b31-bd07e554241d/part_3?..."]\n    content_type = "image/jpeg"\n    \n    print("Starting file upload...")\n    success = upload_file_in_chunks(file_path, upload_urls, content_type)\n    \n    if success:\n        print("File upload completed successfully!")\n    else:\n        print("File upload failed!")\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-how-to-upload-index-md-79977a2db164e5ea59dd.js.map